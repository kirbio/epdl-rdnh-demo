//Called from Default_Continue.dnh
#include"../lib/EV_const.dnh"

@Initialize
{
	SetAutoDeleteObject(true);
	LoadReplayList(); // Intializing Replay List
	//TBackground;
	TReplayIndexSelection(); // Selecting Replay Menu
}

@MainLoop
{
	yield;
}

@Finalize
{
}

let MENU_INDEX_SELECTION = 1;
let MENU_NAME_ENTRY = 2;
let menuMode = MENU_INDEX_SELECTION;

function CreateTextObject(let mx, let my, let size, let text)
{
	let obj = ObjText_Create();
	ObjText_SetText(obj, text);
	ObjText_SetFontSize(obj, size);
	ObjText_SetFontBold(obj, true);
	ObjText_SetFontType(obj,"Lucida Console");
	ObjText_SetFontColorTop(obj, 255,255, 255);
	ObjText_SetFontColorBottom(obj, 255,255, 255);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderColor(obj,0, 0, 0);
	ObjText_SetFontBorderWidth(obj, 2);
	Obj_SetRenderPriorityI(obj, 30);
	ObjRender_SetX(obj, mx);
	ObjRender_SetY(obj, my);
	ObjText_SetSyntacticAnalysis(obj,false);
	return obj;
}

function CreateTextObject_List(let mx, let my, let size, let text)
{
	let obj = ObjText_Create();
	ObjText_SetText(obj, text);
	ObjText_SetFontSize(obj, size);
	//ObjText_SetFontBold(obj, true);
	ObjText_SetFontType(obj,"Lucida Console");
	ObjText_SetFontColorTop(obj, 255,255, 255);
	ObjText_SetFontColorBottom(obj, 255,255, 255);
	ObjText_SetFontBorderType(obj, BORDER_FULL);
	ObjText_SetFontBorderColor(obj,0, 0, 0);
	ObjText_SetFontBorderWidth(obj, 2);
	Obj_SetRenderPriorityI(obj, 30);
	ObjRender_SetX(obj, mx);
	ObjRender_SetY(obj, my);
	ObjText_SetSyntacticAnalysis(obj,false);
	return obj;
}

function CreateEffectObject(px,py,img,blendtype,left,top,right,bottom){
	let obj=ObjPrim_Create(OBJ_SPRITE_2D);
	LoadTexture(img);
	ObjPrim_SetTexture(obj,img);
	ObjSprite2D_SetSourceRect(obj,left,top,right,bottom);
	ObjSprite2D_SetDestCenter(obj);
	Obj_SetRenderPriorityI(obj, 40 );
	if(blendtype=="ALPHA"){
	ObjRender_SetBlendType(obj,BLEND_ALPHA);
	}
	if(blendtype=="RGB"){
	ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
	}
	if(blendtype=="ARGB"){
	ObjRender_SetBlendType(obj,BLEND_ADD_ARGB);
	}
	ObjRender_SetPosition(obj,px,py,0);
	return obj;
}

task TBackground
{	task TVertex(var index, var left, var top, var right, var bottom)
	{
		ObjPrim_SetVertexPosition(obj, index + 0, left, top, 0);
		ObjPrim_SetVertexPosition(obj, index + 1, left, bottom, 0);
		ObjPrim_SetVertexPosition(obj, index + 2, right, top, 0);
		ObjPrim_SetVertexPosition(obj, index + 3, right, top, 0);
		ObjPrim_SetVertexPosition(obj, index + 4, left, bottom, 0);
		ObjPrim_SetVertexPosition(obj, index + 5, right, bottom, 0);

		ObjPrim_SetVertexUVT(obj, index + 0, left, top);
		ObjPrim_SetVertexUVT(obj, index + 1, left, bottom);
		ObjPrim_SetVertexUVT(obj, index + 2, right, top);
		ObjPrim_SetVertexUVT(obj, index + 3, right, top);
		ObjPrim_SetVertexUVT(obj, index + 4, left, bottom);
		ObjPrim_SetVertexUVT(obj, index + 5, right, bottom);

		//STGシーン内のみアニメーション
		if(!GetCommonData("ExpandField", false)){
		if(left >= 0 && right <= 640 && top >=0 && bottom <= 480)
		{
			let alpha = 255;
			while(alpha >= 128)
			{
				ObjPrim_SetVertexAlpha(obj, index + 0, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 1, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 2, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 3, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 4, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 5, alpha/4);
				alpha -= 255 / frame;

				yield;
			}
		}
		}else{
		if(left >= 0 && right <= 640 && top >=0 && bottom <= 480)
		{
			let alpha = 255;
			while(alpha >= 128)
			{
				ObjPrim_SetVertexAlpha(obj, index + 0, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 1, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 2, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 3, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 4, alpha/4);
				ObjPrim_SetVertexAlpha(obj, index + 5, alpha/4);
				alpha -= 255 / frame;

				yield;
			}
		}
		}
		
	}

	//分割設定
	let frame = 30;
	let countH = 20; //分割数
	let countV = 30; 
	let width = 640 / countH;
	let height = 480 / countV;
	let target = GetTransitionRenderTargetName();
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D); //2D頂点ブジェクト生成
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, countH * countV * 6);
	Obj_SetRenderPriorityI(obj, 0); //描画優先度を設定
	ObjPrim_SetTexture(obj, target); //テクスチャを設定
	
	ascent(ix in 0.. countH)
	{
		ascent(iy in 0.. countV)
		{
			let index = (ix + iy * countH) * 6;
			let left = ix * width;
			let right = left + width;
			let top = iy * height;
			let bottom = top + height;
			TVertex(index, left, top, right, bottom);
		}
	}
}

task TReplayIndexSelection()
{
	let cursorY = 0;
	let page = 0;
	let countMaxItem = REPLAY_INDEX_DIGIT_MAX - REPLAY_INDEX_DIGIT_MIN + 1;
	let countItemPerPage = 10;
	let pageMax = trunc((countMaxItem - 1) / countItemPerPage);
	pageMax = max(pageMax, 1);
	let lastPageMaxCursorY = trunc(countMaxItem / countItemPerPage);

	task TMenuItem(let itemY)
	{
		let objText = CreateTextObject_List(64, 120 + 30 * itemY, 16, "");
		//let objSelect = CreateTextObject(64, 64 + 30 * itemY, 18, "");
		//ObjRender_SetBlendType(objSelect, BLEND_ADD_RGB);

		let oldPage = -1;
		while(menuMode == MENU_INDEX_SELECTION)
		{
			if(page != oldPage)
			{
				let index = page * countItemPerPage + itemY + 1;
				let text = rtos("00", index) ~ " ";
				if(IsValidReplayIndex(index))
				{
					text = text ~ vtos("-8s", GetReplayInfo(index, REPLAY_USER_NAME)) ~ " ";
					text = text ~ GetReplayInfo(index, REPLAY_DATE_TIME) ~ " ";
					text = text ~ rtos("000000000000", GetReplayInfo(index, REPLAY_TOTAL_SCORE)) ~ " ";
				}
				else
				{
					text = text ~ "No Data";
				}
				ObjText_SetText(objText, text);
				//ObjText_SetText(objSelect, text);
				oldPage = page;
			}
			
			
			if(page == pageMax && itemY >= lastPageMaxCursorY)
			{
				ObjRender_SetAlpha(objText, 125);
				//Obj_SetVisible(objSelect, false);
			}
			else
			{
			if(itemY == cursorY){
			ObjRender_SetAlpha(objText,255);
			}else{
			ObjRender_SetAlpha(objText,125);
			}
				//Obj_SetVisible(objText, true);
				//Obj_SetVisible(objSelect, itemY == cursorY);
			}

			yield;
		}
		Obj_Delete(objText);
		//Obj_Delete(objSelect);
	}

	ascent(let iItem in 0 .. countItemPerPage)
	{
		TMenuItem(iItem);
	}

	//キー状態がリセットされるまで待機
	while(GetVirtualKeyState(VK_OK) != KEY_FREE){yield;}
	while(GetVirtualKeyState(VK_CANCEL) != KEY_FREE){yield;}
	//キー処理
	let frameKeyHold = 0;//キー押しっぱなしフレーム数
	while(menuMode == MENU_INDEX_SELECTION)
	{
		if(GetVirtualKeyState(VK_CANCEL) == KEY_PUSH)
		{
		//Sound_Play(sfxMenuCancel);
		SetScriptResult(RESULT_END);
		StopMusic;
		CloseScript(GetOwnScriptID());
		
		break;
		}
	
		//決定
		if(GetVirtualKeyState(VK_OK) == KEY_PUSH)
		{
			menuMode = MENU_NAME_ENTRY;
			let index = page * countItemPerPage + cursorY + 1;
			TNameEntry(index);
			PlaySoundA1("ok",100,0);
			
			break;
		}

		//カーソル移動
		if(GetVirtualKeyState(VK_UP) == KEY_PUSH || GetVirtualKeyState(VK_UP) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_UP) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorY--;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH || GetVirtualKeyState(VK_DOWN) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorY++;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				page--;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				page++;
				PlaySoundA1("select",100,0);
			}
		}
		else
		{
			frameKeyHold = 0;
		}

		if(page < 0)
		{
			page = pageMax;
		}
		else if(page > pageMax)
		{
			page = 0;
		}

		if(page != pageMax)
		{
			if(cursorY < 0)
			{
				cursorY = countItemPerPage - 1;
			}
			else if(cursorY >= countItemPerPage)
			{
				cursorY = 0;
			}
		}
		else
		{
			if(cursorY < 0)
			{
				cursorY = lastPageMaxCursorY - 1;
			}
			else if(cursorY >= lastPageMaxCursorY)
			{
				cursorY = 0;
			}
		}

		yield;
	}

}


task TNameEntry(replayIndex) //Returns: Name string
{
	let strTextIn = 
	[
		["A","B","C","D","E","F","G","H","I","J","K","L","M"],
		["N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
		["a","b","c","d","e","f","g","h","i","j","k","l","m"],
		["n","o","p","q","r","s","t","u","v","w","x","y","z"],
		["0","1","2","3","4","5","6","7","8","9","+","-","="],
		[".",",","!","?","@",":",";","[","]","(",")","_","/"],
		["{","}","|","~","**","#","%","&","$","*"," "," ","終"]
	];

	let strTextView = 
	[
		["A","B","C","D","E","F","G","H","I","J","K","L","M"],
		["N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
		["a","b","c","d","e","f","g","h","i","j","k","l","m"],
		["n","o","p","q","r","s","t","u","v","w","x","y","z"],
		["0","1","2","3","4","5","6","7","8","9","+","-","="],
		[".",",","!","?","@",":",";","[","]","(",")","_","/"],
		["{","}","|","~","**","#","%","&","$","*"," ","<-","Done"]
	];

	let cursorX = 0;
	let cursorY = 0;
	let maxCursorX = length(strTextIn[0]);
	let maxCursorY = length(strTextIn);

	task TMenuItem(let itemX, let itemY)
	{
		let objText = CreateTextObject(168+ itemX * 24, 240 + itemY * 24, 15, strTextView[itemY][itemX]);
		//let objSelect = CreateTextObject(120 + itemX * 24, 200 + itemY * 24, 22, strTextView[itemY][itemX]);
		//ObjRender_SetBlendType(objSelect, BLEND_ADD_RGB);

		while(menuMode == MENU_NAME_ENTRY)
		{
			//Obj_SetVisible(objSelect, itemX == cursorX && itemY == cursorY);
			if(itemX == cursorX && itemY == cursorY){
			ObjRender_SetAlpha(objText,255);
			}else{
			ObjRender_SetAlpha(objText,125);
			}
			yield;
		}
		Obj_Delete(objText);
		//Obj_Delete(objSelect);
	}

	ascent(let iY in 0..maxCursorY)
	{
		ascent(let iX in 0 .. maxCursorX)
		{
			TMenuItem(iX, iY);
		}
	}

	//キー状態がリセットされるまで待機
	while(GetVirtualKeyState(VK_OK) != KEY_FREE){yield;}

	//入力済み文字
	let userName = "";
	let objName = CreateTextObject(240, 180, 24, "");
	task TNameCursor()
	{
		let objCursor = CreateTextObject(0, 180, 24, "_");
		while(menuMode == MENU_NAME_ENTRY)
		{
			let nameLength = length(userName);
			ObjRender_SetX(objCursor, 240 + nameLength * 17);
			Obj_SetVisible(objCursor, nameLength < 10);
			yield;
		}
		Obj_Delete(objCursor);
	}
	TNameCursor;

	//キー処理
	let frameKeyHold = 0;//キー押しっぱなしフレーム数
	while(menuMode == MENU_NAME_ENTRY)
	{
		
		if(GetVirtualKeyState(VK_OK) == KEY_PUSH)
		{
			//決定
			let nameLength = length(userName);
			if(cursorX>maxCursorX-3 &&cursorY == maxCursorY-1)
			{
			if (cursorX == maxCursorX-1){
			//Done
				PlaySoundA1("ok",100,0);
				if(nameLength == 0)
				{
					userName = "No Name";
				}
				else
				{
				while(length(userName)<10){
				userName = userName~" ";
				}
				//=====Set Proper Replay Info====
				SetReplayComments;
				//===============================
				
				SaveReplay(replayIndex, userName);
				SetScriptResult(RESULT_END);
				StopMusic;
				CloseScript(GetOwnScriptID());
				return;
				}
			}else if(cursorX == maxCursorX-2){
			//Erase Button
			if(nameLength > 0)
			{
				userName = userName[0..nameLength-1];
			}
			PlaySoundA1("cancle",100,0);
			}
			}
			else if(nameLength < 10)
			{
				PlaySoundA1("ok",100,0);
				userName = userName ~ strTextIn[cursorY][cursorX];
			}
		}
		if(GetVirtualKeyState(VK_CANCEL) == KEY_PUSH)
		{
			//キャンセル
			PlaySoundA1("cancle",100,0);
			let nameLength = length(userName);
			if(nameLength > 0)
			{
				userName = userName[0..nameLength-1];
			}else{
			menuMode = MENU_INDEX_SELECTION;
			TReplayIndexSelection();
			Obj_Delete(objName);
			}
			
		}
		ObjText_SetText(objName, userName);

		//カーソル移動
		if(GetVirtualKeyState(VK_UP) == KEY_PUSH || GetVirtualKeyState(VK_UP) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_UP) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorY--;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH || GetVirtualKeyState(VK_DOWN) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorY++;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_LEFT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorX--;
				PlaySoundA1("select",100,0);
			}
		}
		else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD)
		{
			frameKeyHold++;
			if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH ||
				frameKeyHold == 20 ||
				 (frameKeyHold > 20 && (frameKeyHold % 10 == 0)))
			{
				cursorX++;
				PlaySoundA1("select",100,0);
			}
		}
		else
		{
			frameKeyHold = 0;
		}

		if(cursorX < 0)
		{
			cursorX = maxCursorX-1;
		}
		else if(cursorX >= maxCursorX)
		{
			cursorX = 0;
		}

		if(cursorY < 0)
		{
			cursorY = maxCursorY-1;
		}
		else if(cursorY >= maxCursorY)
		{
			cursorY = 0;
		}

		yield;
	}
	Obj_Delete(objName);
}